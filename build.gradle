buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.0.0'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.0'
    }
}
apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'

repositories {
    mavenCentral()
    maven { url "http://maven.arcao.com/" }
}

dependencies {
    // from Android local maven repository
    compile 'com.android.support:support-v4:21.0.3'

    // from maven.arcao.com repository
    compile('com.arcao:geocaching-api:1.5.25') {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12' /* Not working in Android, slf4j-android used instead */
    }
    compile 'menion:locus-api-android:1.26.28'

    // from Maven central repository
    compile ('ch.acra:acra:4.5.0') {
      exclude group: 'org.json', module: 'json' /* already in Android */
    }
    compile 'org.apache.commons:commons-lang3:3.1'
    compile('oauth.signpost:signpost-commonshttp4:1.2.1.2') {
      exclude group: 'org.apache.httpcomponents', module: 'httpclient' /* already in Android */ 
      exclude group: 'commons-codec', module: 'commons-codec' /* already in Android */
    }
    compile 'org.slf4j:slf4j-android:1.7.7'
}

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ", TimeZone.getTimeZone("UTC"))
def gitVersionCode = 'git rev-list --count HEAD'.execute([], project.rootDir).text.trim().toInteger();

def isTravis = "true".equals(System.getenv("TRAVIS"))
def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries preDexEnabled && !isTravis
    }

    defaultConfig {
        versionCode gitVersionCode
        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        release {
            keyAlias = "geocaching4locus"
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.dev'
            versionNameSuffix '-dev'
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            //shrinkResources true // too aggressive
            proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFile 'proguard.cfg'
        }
    }

    packagingOptions {
        // removed because of conflict in creating package
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        // unused files, removed to minimize APK file
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'org/apache/http/version.properties'
        exclude 'templates/release-notes.vm'
    }
//    lintOptions { abortOnError false }
}

if (project.hasProperty('storeFile') &&
        project.hasProperty('storePassword') &&
        project.hasProperty('keyPassword')) {
    android.signingConfigs.release.storeFile = file(storeFile)
    android.signingConfigs.release.storePassword = storePassword
    android.signingConfigs.release.keyPassword = keyPassword
} else {
    android.buildTypes.release.signingConfig = android.signingConfigs.debug
}

// repackage Gson during release process
configurations {
    // create new configuration for JarJar
    jarjar
}

dependencies {
    // add dependencies to jarjar configuration
    jarjar 'com.googlecode.jarjar:jarjar:1.3'
}

// for all variants
android.applicationVariants.all { variant ->
    // this works only when proguard is enabled
    if (!variant.buildType.minifyEnabled)
        return;

    // create task name
    def jarJarTaskName = "jarJar${variant.name.capitalize()}";

    // prepare variables
    def workingDir = new File(project.rootDir, 'build/intermediates/jarjar');
    // proguard generate one jar file. This jar file is in Dex.inputFiles
    // (see sources com/android/build/gradle/BasePlugin.groovy)
    def inputLibrary = variant.dex.inputFiles[0];
    def outputLibrary = new File(workingDir, 'classes.jar').getCanonicalFile()

    // define task
    def jarJarTask = task("${jarJarTaskName}") {
        // debug print
        logger.info '****************************'
        logger.info "* Prepare ${jarJarTaskName}"
        logger.info '****************************'
        logger.info "inputLibrary:   ${inputLibrary}"
        logger.info "outputLibrary:  ${outputLibrary}"
        logger.info '****************************'

        // support for up-to-date feature
        inputs.file inputLibrary
        outputs.file outputLibrary

        doLast {
            // in Ant
            project.ant {
                // define jarjar task, for classpath is used path from jarjar configuration
                taskdef name: 'jarjar', classname: 'com.tonicsystems.jarjar.JarJarTask', classpath: configurations.jarjar.asPath
                // start jarjar task
                jarjar(jarfile: outputLibrary) {
                    // input is our inputLibrary
                    zipfileset(src: inputLibrary)
                    // rule to repackage gson to new package
                    rule pattern: 'com.google.gson.**', result: 'com.google.repacked.gson.@1'
                }
            }
        }
    }

    // replace jar generated by Proguard with jar generated by JarJar
    variant.dex.inputFiles = [outputLibrary]
    variant.dex.libraries = []

    // plan task to be started between Proguard task and Dex task
    variant.dex.dependsOn jarJarTask
    jarJarTask.dependsOn variant.variantData.obfuscationTask
}