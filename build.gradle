buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.1.0'
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.0'
    }
}
apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'

repositories {
    mavenCentral()
    maven { url "http://maven.arcao.com/" }
    jcenter()
}

dependencies {
    // from Android local maven repository
    compile 'com.android.support:support-v4:22.0.0'
    compile 'com.android.support:appcompat-v7:22.0.0'

    // from maven.arcao.com repository
    compile('com.arcao:geocaching-api:1.6.1') {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12' // Not working in Android, slf4j-timber used instead
    }
    compile 'menion:locus-api-android:1.31.34'

    // from Maven central repository
    compile 'com.arcao:slf4j-timber:1.5'
    compile ('ch.acra:acra:4.6.0') {
      exclude group: 'org.json', module: 'json' // already in Android
    }
    compile 'org.apache.commons:commons-lang3:3.2'
    compile 'commons-io:commons-io:2.4'
    compile('org.scribe:scribe:1.3.7') {
      exclude group: 'commons-codec', module: 'commons-codec' // already in Android
    }

    // from JCenter repository
    compile 'com.afollestad:material-dialogs:0.6.4.0'
}

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def buildTime = new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ", TimeZone.getTimeZone("UTC"))
def gitVersionCode = 'git rev-list --count HEAD'.execute([], project.rootDir).text.trim().toInteger();

def isTravis = "true".equals(System.getenv("TRAVIS"))
def preDexEnabled = "true".equals(System.getProperty("pre-dex", "true"))

// set Geocaching API staging key and secret if production key and secret is not set
// Note: Staging server is slow and not for production use!!!!
if (!project.hasProperty('geocachingApiKey')) {
    project.setProperty('geocachingApiKey', '9C7552E1-3C04-4D04-A395-230D8931E494')
}
if (!project.hasProperty('geocachingApiSecret')) {
    project.setProperty('geocachingApiSecret', 'DA7CC147-7B5B-4423-BCB4-D0C03E2BF685')
}
if (!project.hasProperty('geocachingApiStaging')) {
    project.setProperty('geocachingApiStaging', true)
}

android {
    compileSdkVersion 22
    buildToolsVersion "22"

    dexOptions {
        // Skip pre-dexing when running on Travis CI or when disabled via -Dpre-dex=false.
        preDexLibraries preDexEnabled && !isTravis
    }

    defaultConfig {
        versionCode gitVersionCode
        buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
        buildConfigField "String", "GEOCACHING_API_KEY", "\"${geocachingApiKey}\""
        buildConfigField "String", "GEOCACHING_API_SECRET", "\"${geocachingApiSecret}\""
        buildConfigField "boolean", "GEOCACHING_API_STAGING", "${geocachingApiStaging}"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        release {
            keyAlias = "geocaching4locus"
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix '.dev'
            versionNameSuffix '-dev'
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            // shrinkResources true // too aggressive
            proguardFile getDefaultProguardFile('proguard-android-optimize.txt')
            proguardFile 'proguard.cfg'
        }
    }

    packagingOptions {
        // removed because of conflict in creating package
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        // unused files, removed to minimize APK file
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'org/apache/http/version.properties'
        exclude 'templates/release-notes.vm'
        exclude 'log4j.xml'
    }
    lintOptions { abortOnError false }
}

if (project.hasProperty('storeFile') &&
        project.hasProperty('storePassword') &&
        project.hasProperty('keyPassword')) {
    android.signingConfigs.release.storeFile = file(storeFile)
    android.signingConfigs.release.storePassword = storePassword
    android.signingConfigs.release.keyPassword = keyPassword
} else {
    android.buildTypes.release.signingConfig = android.signingConfigs.debug
}